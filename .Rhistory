library('scales')
library('KernSmooth')
data <- read
library('tidyverse')
library('readr')
data <- read_tsv('"C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt"')
data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt")
View(data)
colnames(data)
colnames(data %in% c("position", "cell_length"))
data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt")
cell_length_data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt")
interval_in_cm = 0.1
bw_multiplier = 1
output_bw_tibble = FALSE
colnames(cell_length_data %in% c("position", "cell_length"))
names(cell_length_data %in% c("position", "cell_length"))
names(cell_length_data)[1]
unique(cell_length_data$plant_id)
length(levels(as.factor(unique(cell_length_data$plant_id))))
length((unique(cell_length_data$plant_id)))
collected_bandwidths <- vector(mode = "numeric", length = length((unique(cell_length_data$plant_id))))
collected_bandwidths <- NA
bandwith_tibble <- tibble(unique(cell_length_data$plant_id), collected_bandwidths)
colnames(bandwith_tibble) <- c("plant_id", "collected_bandwidths")
bandwith_tibble
bandwith_tibble$collected_bandwidths[1] <- 12.3
bandwith_tibble
cell_length_data
cell_length_data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt")
interval_in_cm = 0.1
bw_multiplier = 1
output_bw_tibble = FALSE
# check whether the user has provided a data.frame or tbl (tibble)
if(sum(class(cell_length_data) %in% c("data.frame", "tbl", "tbl_df")) == 0) { # If file does not exist
stop("\n ##### \n Data is not provided as data.frame or tbl (tibble).\n #####")
}
# Check column headers
if(names(cell_length_data)[1] != "plant_id") { # Check whether the first column is named position
stop(paste("First column should be named 'plant_id'.", sep = ""))
}
if(names(cell_length_data)[2] != "position") { # Check whether the first column is named position
stop(paste("First column should be named 'position'.", sep = ""))
}
if(names(cell_length_data)[3] != "cell_length") { # Check whether the second column is named cell_length
stop(paste("Second column should be named 'cell_length'", sep = ""))
}
# Check whether the positions are numeric
if(!is.numeric(cell_length_data$position)) {
stop(paste("Positions are not all numeric.", sep = ""))
}
# Check whether the cell_lengths are numeric
if(!is.numeric(cell_length_data$cell_length)) {
stop(paste("Cell lengths are not all numeric.", sep = ""))
}
# Tibble to collect bandwiths
collected_bandwidths <- vector(mode = "numeric", length = length((unique(cell_length_data$plant_id))))
collected_bandwidths <- NA
bandwith_tibble <- tibble(unique(cell_length_data$plant_id), collected_bandwidths)
colnames(bandwith_tibble) <- c("plant_id", "collected_bandwidths")
# FIT CELL LENGTHS AND PLOT THEM IN A PDF FILE
pdf_name <- paste("fit_plots_using_bandwidth_multiplier_", bw_multiplier, ".pdf", sep = "")
pdf(pdf_name)
for (selected_plant_id in unique(cell_length_data$plant_id)) {
# dpill is sometimes unable to calculate bandwidth. Set calculated_bandwidth to NA each time. A check is perfomed whether bandwidth is then calculated or not.
calculated_bandwidth <- NA
#1. EXTRACT THE DATA, PLOT AND SAVE GRAPH (change input file name as required)
profile <- dplyr::filter(cell_length_data, plant_id == selected_plant_id)
# Store position and cell_length
x <- profile$position
y <- profile$cell_length
#2. CALCULATION OF OPTIMIZED BANDWIDTH FOR FITTING
calculated_bandwidth <- dpill(x,y) #this is the calculation of the optimized bandwidth for the kernel as in KernSmooth package
bandwith_tibble$collected_bandwidths[which(bandwith_tibble$plant_id == selected_plant_id)] <- calculated_bandwidth
#3. DETERMINE THE ENDPOINT
endpoint_in_cm <- ( (max(profile$position) %/% interval_in_cm) * interval_in_cm ) + interval_in_cm
#3. CALCULATON OF THE GRIDSIZE FOR WHICH CELL LENGTHS ARE ESTIMATED
datagrid <- (endpoint_in_cm / interval_in_cm) + 1
# If the bandwith can be calculated, make plot the polynomials. If not calculated, skip plotting.
if (!is.na(calculated_bandwidth)) {
#4. FIT AND PLOT POLYNOMIALS USING BANDWIDTH (AND DESIRED MULTIPLES FOR MORE SMOOTHNESS) CALCULATED IN STEP 2
fit <- locpoly(x, y,
degree = 2,
bandwidth = bw_multiplier*calculated_bandwidth,
gridsize = datagrid,
range.x = c(0, endpoint_in_cm))
plot(x, y,
xlab = "interpolated position",
ylab = "cell length [micrometer]",
main = paste("Cell length fit of: ", selected_plant_id, sep = ""))
lines(fit, col=alpha("blue", 1), type="l", lwd=3)
#5. CALCULATION AND PLOT OF CORRESPONDING DERIVATIVES
der <- locpoly(x, y,
drv = 1,
degree = 2,
bandwidth = bw_multiplier*calculated_bandwidth,
gridsize = datagrid,
range.x = c(0, endpoint_in_cm))
plot(der,
col = alpha("blue", 1),
xlab = "interpolated position",
ylab = "dl/dx",
type = "l", lwd=3,
main = paste("Derivative of: ", selected_plant_id, sep = ""))
abline(h = 0)
} else {
plot(x = 0, main = paste("Plant: ", selected_plant_id, " did not allow for bandwidth calculation."))
warning("There were one or more plants for which no bandwidth could be calculated. Please specify an alternative bandwidth when extracting the cell lengths.")
}
}
barplot(bandwith_tibble$collected_bandwidths,
ylab = "bandwith",
xlab = "all plants (labels not printed)",
main = paste("Mean bandwith is: ",
mean(bandwith_tibble$collected_bandwidths,
na.rm = TRUE),
sep = ""))
# stop pdf
dev.off()
cell_length_data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt")
interval_in_cm = 0.1
bw_multiplier = 1
alternative_bw = 0.5
tidy_cell_lengths = TRUE
library('tidyr')
library('tibble')
library('dplyr')
library('tools')
library('scales')
library('KernSmooth')
cell_length_data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\cell_length_measurements_micrometer - adjusted.txt")
interval_in_cm = 0.1
bw_multiplier = 1
alternative_bw = 0.5
tidy_cell_lengths = TRUE
# check whether the user has provided a data.frame or tbl (tibble)
if(sum(class(cell_length_data) %in% c("data.frame", "tbl", "tbl_df")) == 0) { # If file does not exist
stop("\n ##### \n Data is not provided as data.frame or tbl (tibble).\n #####")
}
# Check column headers
if(names(cell_length_data)[1] != "plant_id") { # Check whether the first column is named position
stop(paste("First column should be named 'plant_id'.", sep = ""))
}
if(names(cell_length_data)[2] != "position") { # Check whether the first column is named position
stop(paste("First column should be named 'position'.", sep = ""))
}
if(names(cell_length_data)[3] != "cell_length") { # Check whether the second column is named cell_length
stop(paste("Second column should be named 'cell_length'", sep = ""))
}
# Check whether the positions are numeric
if(!is.numeric(cell_length_data$position)) {
stop(paste("Positions are not all numeric.", sep = ""))
}
# Check whether the cell_lengths are numeric
if(!is.numeric(cell_length_data$cell_length)) {
stop(paste("Cell lengths are not all numeric.", sep = ""))
}
# Create a data frame to collect all cell lengths
position <- vector(mode = "numeric")
cell_length <- vector(mode = "numeric")
plant_id <- vector(mode = "character")
df_of_fit <- as.data.frame(cbind(position, cell_length, plant_id))
df_of_fit
for (selected_plant_id in unique(cell_length_data$plant_id)) {
#1. FILTER THE DATA
profile <- dplyr::filter(cell_length_data, plant_id == selected_plant_id)
# Store position and cell_length
x <- profile$position
y <- profile$cell_length
#2. CALCULATION OF OPTIMIZED BANDWIDTH FOR FITTING
calculated_bandwith <- dpill(x,y) #this is the calculation of the optimized bandwidth for the kernel as in KernSmooth package
#3. DETERMINE THE ENDPOINT
endpoint_in_cm <- ( (max(profile$position) %/% interval_in_cm) * interval_in_cm ) + interval_in_cm
#3. CALCULATON OF THE GRIDSIZE FOR WHICH CELL LENGTHS ARE ESTIMATED
datagrid <- (endpoint_in_cm / interval_in_cm) + 1
# If the bandwith can be calculated, make plot the polynomials. If not calculated, skip plotting.
if (!is.na(calculated_bandwith)) {
fit <- locpoly(x, y,
degree = 2,
bandwidth = bw_multiplier*calculated_bandwith,
gridsize = datagrid,
range.x = c(0, endpoint_in_cm))
} else if (alternative_bw == 0.5) {
message("Unable to calculate bandwidth. Alternative bandwidth used. Unless specified, alternative_bw is set to 0.5 by default.")
message("Advised to extract the bandwidths, using get_pdf_with_different_bw_fits(), with output_bw_tibble = TRUE.")
message("The extracted bandwidth can be use to calculate the average bandwidth.")
fit <- locpoly(x,y,
degree=2,
bandwidth=bw_multiplier*alternative_bw,
gridsize=datagrid,
range.x=c(0, endpoint_in_cm))
} else {
message(paste("Using the set alternative_bw of ", alternative_bw, " for plant ", selected_plant_id, " .", sep = ""))
fit <- locpoly(x,y,
degree=2,
bandwidth=bw_multiplier*alternative_bw,
gridsize=datagrid,
range.x=c(0, endpoint_in_cm))
}
temp_df <- as.data.frame(cbind(fit[[1]], fit[[2]]))
colnames(temp_df) <- c("position", "cell_length")
temp_df$plant_id <- selected_plant_id
df_of_fit <- rbind(df_of_fit, temp_df)
}
message("\n ##### \n Analysis finished. A tibble with cell lengths was returned by the function.\n #####")
tibble_of_df <- as_tibble(df_of_fit)
tibble_of_df <- tibble_of_df %>% select(plant_id, position, cell_length)
View(tibble_of_df)
library('tidyr')
library('tibble')
library('dplyr')
library('readxl')
library('tools')
file <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\growth_measurements_millimeter.txt")
n_LER_for_mean = 2
output <- "means"
LER_data <- file
# check whether the user has provided a data.frame or tbl (tibble)
if(sum(class(LER_data) %in% c("data.frame", "tbl")) == 0) { # If file does not exist
stop("\n ##### \n Data is not provided as data.frame or tbl (tibble).\n #####")
}
# Perform checks on the data_file
# check column name of first column. Needs to be plant_id.
if(names(LER_data)[1] != "plant_id") { # Check whether the first column is named plant_id
stop("\n ##### \n The first column should contain plant_id's and should be named exactly plant_id.\n #####")
}
# check whether all plant_id's are unique
if(length(LER_data$plant_id) != length(unique(LER_data$plant_id))){
stop("\n ##### \n There are duplicate plant_id's. Please use unique plant_id's for each plant.\n #####")
}
# Tidy data
# Create one data_and_hour_column and one leaf_length column
tidy_LER_data <- gather(LER_data,
"date_and_hour", "leaf_length",
2:ncol(LER_data))
# Check whether leaf_length is all nummeric
if(!is.numeric(tidy_LER_data$leaf_length)) {
stop("\n ##### \n Please check the entered leaf lengths. Not all of them seem to be numeric.\n #####")
}
# *** convert data_and_hour strings column to date-time POSIXct format
# Excel stores date-times as a number. The janitor package allows us to convert the data-time back.
tidy_LER_data$date_and_hour <- lubridate::ymd_hms(tidy_LER_data$date_and_hour, truncated = 1)
if(anyNA(tidy_LER_data$date_and_hour)) {
stop("\n ##### \n Please check the dates in the excel file. They should be in the format dd/mm/yyyy hh:mm. \n #####")
}
# *** Order based on plant and timepoint to allow me to calculate time and growth and eventually LER
#' When the data is ordered, you can loop over the data and calculate differences between consecutive rows.
sorted_tidy_LER_data <- tidy_LER_data[order(tidy_LER_data$plant_id, tidy_LER_data$date_and_hour),]
# *** Create DF for calculation
#' Copy sorted_tidy_LER_data and make new columns for time_hours, growth_mm and
#' LER These columns will be used to perform calculations with, the results will
#' be stored in the new dataframe, using these columns. This is because each
#' plant is filtered out individually for each iteration in the for loop. In
#' each iteration, these columns of the filtered plant will be used, but not
#' stored The result of each iteration will be saved in the LER_calculations_df,
#' created below.
sorted_tidy_LER_data_calculations <- sorted_tidy_LER_data
sorted_tidy_LER_data_calculations$time_hours <- as.numeric(NA)
sorted_tidy_LER_data_calculations$growth_mm <- as.numeric(NA)
sorted_tidy_LER_data_calculations$LER <- as.numeric(NA)
# Initiate new df to collect all calculation results
LER_calculations_df <- sorted_tidy_LER_data_calculations[0,]
# Create vectors to store mean LER's
# Make a vector to collect all sample id's
plant_id_vect <- levels(as.factor(sorted_tidy_LER_data_calculations$plant_id))
# Make a vector to collect all LER means
mean_plant_LER <- vector(mode = "numeric",
length = length(levels(as.factor(sorted_tidy_LER_data_calculations$plant_id))))
# Make new tibble with plants and their mean LER
tibble_LERs <- tibble(plant_id_vect, mean_plant_LER)
tibble_LERs$mean_plant_LER <- NA
tibble_LERs
# Add info
# Rename column, so both tables have same ID
colnames(tibble_LERs)[colnames(tibble_LERs) == "plant_id_vect"] <- "plant_id"
# For loop to calculate all LERs
# Will generate two warnings for each plant with no data
for(plant in levels(as.factor(sorted_tidy_LER_data_calculations$plant_id))){
# filter plant out of dataset
filtered_plant <- sorted_tidy_LER_data_calculations %>% filter(plant_id == plant)
# take rows needed
first_row <- min(which(!is.na(filtered_plant$leaf_length) == TRUE)) # take integer of first row where you have a measurement
last_row <- max(which(!is.na(filtered_plant$leaf_length) == TRUE)) # take integer of last row where you have a measurement
if ( first_row == Inf || last_row == -Inf || first_row == last_row ) {
# If there are no measurements for a plant, do nothing. Two warning messages will be generated for each plant.
# If there is only one measurement for a plant, do nothing.
} else {
filtered_plant <- filtered_plant[first_row:last_row,] # only keep the measurements
# calculate time between dates (EXPRESSED IN NUMBER OF HOURS) and add this in the time_hours column
for (rownumber in 2:nrow(filtered_plant)) { # omit the very first row, since there is not a previous day on row 1
filtered_plant$time_hours[rownumber] <- as.numeric(interval(filtered_plant$date_and_hour[rownumber-1], filtered_plant$date_and_hour[rownumber]))/3600
}
# calculate growth between measurements
# for LER, it is possible that on a certain day/time, a plant was not measured by accident
for (rownumber in 2:nrow(filtered_plant)) { # omit the very first row, since you cannot calculate a difference with a previous measurement there
if ( is.na(filtered_plant$leaf_length[rownumber]) || sum(!is.na(filtered_plant$leaf_length[1:rownumber])) < 2  ) {
# If the current row has no measurement, then you cannot calculate growth OR if there are no previous measurements
# Do nothing.
# Reminder: The first row has a measurement, since this row was selected using the "first_row" variable
} else {
filtered_plant$growth_mm[rownumber] <- filtered_plant$leaf_length[rownumber] - filtered_plant$leaf_length[max(which(!is.na(filtered_plant$leaf_length[1:rownumber - 1]) == TRUE))]
#' the last part of the formula above selects the last measurement, skipping NA measurements
#' it first collects all the leaf length measurements, except for the current one
#' then, using !is.na(), it returns TRUE for rows with measurements
#' then, using which, it returns the rownumber for the rows which returned TRUEs
#' then, using max, it returns the highest rownumber, thus the last previous measurement
}
}
# calculate LER
for (rownumber in 1:nrow(filtered_plant)) {
if ( is.na(filtered_plant$growth_mm[rownumber]) ) { # if there is no growth (i.e. NA), then skip. The first row will never have a growth value, thus will always be skipped here.
} else {
time_interval <- as.numeric(interval(filtered_plant$date_and_hour[max(which(!is.na(filtered_plant$leaf_length[1:rownumber - 1]) == TRUE))], filtered_plant$date_and_hour[rownumber]))/3600
# calculate time interval inbetween the two length measurements, skipping days which have no measurements
# it uses the same technique as the calculation for calculating growth inbetween measurements
filtered_plant$LER[rownumber] <- filtered_plant$growth_mm[rownumber] / time_interval
}
}
LER_calculations_df <- rbind(LER_calculations_df, filtered_plant) # add the calculations of the current plant to the dataframe "LER_calculations_df"
all_LERs_of_plant <- na.omit(filtered_plant$LER)
tibble_LERs$mean_plant_LER[which(tibble_LERs$plant_id == plant)] <- mean(all_LERs_of_plant[1:n_LER_for_mean], na.rm = TRUE)
}
}
message("\n ##### \n Analysis finished.\n #####")
message("\n ##### \n For every plant, not containing any growth measurements, two warnings concerning min and max value are printed below.\n If nothing is printed, all plants contained measurements. \n ##### \n")
cell_length_data <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\meristem_size_micrometer.txt")
meristem_size_micrometer_path <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\meristem_size_micrometer.txt")
meristem_size_micrometer <- read_tsv("C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\installation and demo script\\data files\\meristem_size_micrometer.txt")
sum(class(meristem_size_micrometer) %in% c("data.frame", "tbl", "tbl_df")) == 0
names(meristem_size_micrometer)[1] != "plant_id"
names(meristem_size_micrometer)[2] != "mer_length_um"
!setequal(colnames(LER_means), c("plant_id", "mean_plant_LER"))
LER_means <- tibble_LERs
tidy_cell_lengths <- tibble_of_df
!setequal(colnames(LER_means), c("plant_id", "mean_plant_LER"))
!setequal(colnames(tidy_cell_lengths), c("plant_id","position","cell_length"))
!all(unique(tidy_cell_lengths$plant_id) %in% unique(LER_means$plant_id))
sum(class(meristem_size_micrometer) %in% c("data.frame", "tbl", "tbl_df")) == 0
!setequal(colnames(LER_means), c("plant_id", "mean_plant_LER"))
!setequal(colnames(tidy_cell_lengths), c("plant_id","position","cell_length"))
!all(unique(tidy_cell_lengths$plant_id) %in% unique(LER_means$plant_id))
!is.numeric(meristem_size_micrometer$mer_length_um)
length(meristem_size_micrometer$plant_id) != length(unique(meristem_size_micrometer$plant_id))
!setequal(meristem_size_micrometer$plant_id, unique(tidy_cell_lengths$plant_id))
!all(unique(tidy_cell_lengths$plant_id) %in% unique(LER_means$plant_id))
all(unique(tidy_cell_lengths$plant_id) %in% unique(LER_means$plant_id))
unique(tidy_cell_lengths$plant_id) %in% unique(LER_means$plant_id)
meristem_size_micrometer$plant_id, unique(tidy_cell_lengths$plant_id)
setequal(meristem_size_micrometer$plant_id, unique(tidy_cell_lengths$plant_id))
# Initiate tibble where all the results will be stored
no_of_plants <- length(levels(as.factor(tidy_cell_lengths$plant_id)))
all_results <- tibble(
plant_id = levels(as.factor(tidy_cell_lengths$plant_id)),
LER = vector(mode = "numeric", length = length(no_of_plants)),
Meristem_size = vector(mode = "numeric", length = length(no_of_plants)),
Length_of_growth_zone = vector(mode = "numeric", length = length(no_of_plants)),
Length_of_elongation_zone = vector(mode = "numeric", length = length(no_of_plants)),
Mature_cell_length = vector(mode = "numeric", length = length(no_of_plants)),
Cell_production_rate = vector(mode = "numeric", length = length(no_of_plants)),
Number_of_cells_in_the_meristem = vector(mode = "numeric", length = length(no_of_plants)),
Number_of_cells_in_the_elongation_zone = vector(mode = "numeric", length = length(no_of_plants)),
Number_of_cells_in_the_growth_zone = vector(mode = "numeric", length = length(no_of_plants)),
Average_cell_division_rate = vector(mode = "numeric", length = length(no_of_plants)),
Cell_cycle_duration = vector(mode = "numeric", length = length(no_of_plants)),
Time_in_elongation_zone = vector(mode = "numeric", length = length(no_of_plants)),
Time_in_division_zone = vector(mode = "numeric", length = length(no_of_plants)),
Length_of_cells_leaving_meristem = vector(mode = "numeric", length = length(no_of_plants)),
Average_cell_expansion_rate = vector(mode = "numeric", length = length(no_of_plants))
)
all_results
for (plant in levels(as.factor(all_results$plant_id))) {
# Filter cell length profile
filtered_plant <- tidy_cell_lengths %>%
filter(plant_id == plant)
# Find the row number of this plant in the all_results tibble
row_number_of_plant <- which(all_results$plant_id == plant)
# Find the matching LER and enter it in all_results tibble
all_results$LER[row_number_of_plant] <- LER_means$mean_plant_LER[which(LER_means$plant_id == plant)]
# Find the matching meristem size and enter it in all_results tibble
all_results$Meristem_size[row_number_of_plant] <- meristem_size_micrometer$mer_length_um[which(meristem_size_micrometer$plant_id == plant)]
# Calculate cummulative cell number and return it as a vector
result_cumm_cell_no <- cumm_cell_no(filtered_plant$cell_length, filtered_plant$position)
result_cumm_cell_no
# Calculate 95 perc value
result_perc_95 <- perc_95(size_vect <- filtered_plant$cell_length)
result_perc_95
# Find growth zone size
result_growth_zone <- growth_zone(pos_vect = filtered_plant$position,
size_vect = filtered_plant$cell_length,
perc95_vect = result_perc_95)
all_results$Length_of_growth_zone[row_number_of_plant] <- result_growth_zone
# Calculate elongation zone size
all_results$Length_of_elongation_zone[row_number_of_plant] <- all_results$Length_of_growth_zone[row_number_of_plant] - (all_results$Meristem_size[row_number_of_plant]/1000)
# Mature cell length
result_mat_cell_length <- mat_cell_length(growth_zone_size = result_growth_zone,
pos_vect = filtered_plant$position,
cell_lengths = filtered_plant$cell_length)
all_results$Mature_cell_length[row_number_of_plant] <- result_mat_cell_length
# Cell production rate
result_cell_prod_rate <- cell_prod_rate(LER = all_results$LER[row_number_of_plant],
mat_cell_length = result_mat_cell_length)
all_results$Cell_production_rate[row_number_of_plant] <- result_cell_prod_rate
# number of cells in the meristem
result_mer_cell_no <- value_at_end_of_mer(mer_size = all_results$Meristem_size[row_number_of_plant],
value = result_cumm_cell_no,
pos_vect = filtered_plant$position)
all_results$Number_of_cells_in_the_meristem[row_number_of_plant] <- result_mer_cell_no
# length of cells leaving the meristem
result_mer_cell_length <- value_at_end_of_mer(mer_size = all_results$Meristem_size[row_number_of_plant],
value = filtered_plant$cell_length,
pos_vect = filtered_plant$position)
all_results$Length_of_cells_leaving_meristem[row_number_of_plant] <- result_mer_cell_length
# number of cells in the growth zone
result_growth_zone_cell_no <- growth_zone_cell_no(pos_vect = filtered_plant$position,
cum_cell_no = result_cumm_cell_no,
growth_zone_size = result_growth_zone)
all_results$Number_of_cells_in_the_growth_zone[row_number_of_plant] <- result_growth_zone_cell_no
# number of cells in the elongation zone
result_elong_zone_cell_no <- elong_zone_cell_no(growth_zone_cell_no = result_growth_zone_cell_no,
mer_cell_no = result_mer_cell_no)
all_results$Number_of_cells_in_the_elongation_zone[row_number_of_plant] <- result_elong_zone_cell_no
# Average cell division rate
result_avg_cell_div_rate <- avg_cell_div_rate(cell_prod_rate = result_cell_prod_rate,
mer_cell_no = result_mer_cell_no)
all_results$Average_cell_division_rate[row_number_of_plant] <- result_avg_cell_div_rate
# Cell cycle duration
result_cell_cycle_duration <- cell_cycle_duration(avg_cell_div_rate = result_avg_cell_div_rate)
all_results$Cell_cycle_duration[row_number_of_plant] <- result_cell_cycle_duration
# Time in elongation zone
result_time_in_elo_zone <- time_in_elo_zone(elong_zone_cell_no = result_elong_zone_cell_no,
cell_prod_rate = result_cell_prod_rate)
all_results$Time_in_elongation_zone[row_number_of_plant] <- result_time_in_elo_zone
# Time in division zone
result_time_in_div_zone <-  time_in_div_zone(mer_cell_no = result_mer_cell_no,
cell_cycle_duration = result_cell_cycle_duration)
all_results$Time_in_division_zone[row_number_of_plant] <- result_time_in_div_zone
# Average cell expansion rate
result_avg_cell_exp_rate <- avg_cell_exp_rate(mat_cell_length = result_mat_cell_length,
mer_cell_length = result_mer_cell_length,
time_in_elo_zone = result_time_in_elo_zone)
all_results$Average_cell_expansion_rate[row_number_of_plant] <- result_avg_cell_exp_rate
}
library(devtools)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::document(path)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
library(devtools)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
library(devtools)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
devtools::build(path)
library(devtools)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
library(devtools)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
#?devtools::check
devtools::build(path)
install.packages("Rtools")
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
#?devtools::check
devtools::build(path)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
#?devtools::check
devtools::build(path)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
#?devtools::check
devtools::build(path)
path <- "C:\\Users\\jbert\\Google Drive\\PhD\\THESIS\\CH1\\leafkin"
devtools::document(path)
devtools::check(path, cran = FALSE)
devtools::build(path)
